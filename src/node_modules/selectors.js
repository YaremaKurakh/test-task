import R from 'ramda'

export const getPhoneById = (state, id) => R.prop(id, state.phones)

export const getPhones = (state, ownProps) => {
  const activeCountId = getActiveCountId(ownProps)
  const applySearch = item => R.contains(
    state.phonesPage.search,
    R.prop('name', item)
  )
  const applyCount = item => R.equals(
    activeCountId,
    R.prop('count', item)
  )

  const phones = R.compose(
    R.filter(applySearch),
    R.when(R.always(activeCountId), R.filter(applyCount)),
    R.map(id => getPhoneById(state, id))
  )(state.phonesPage.ids)

  return phones
}

export const getRenderedPhonesLength = state => R.length(state.phonesPage.ids)

export const getTotalBasketCount = state => R.length(state.basket)

export const getTotalBasketPrice = state => {
  const totalPrice = R.compose(
    R.sum,
    R.pluck('price'),
    R.map(id => getPhoneById(state, id))
  )(state.basket)

  return totalPrice
}

export const getCounts = state => R.values(state.counts)

export const getActiveCountId = ownProps => R.path(['params', 'id'], ownProps)

export const getBasketPhonesWithCount = state => {
  const phoneCount = id => R.compose(
    R.length,
    R.filter(basketId => R.equals(id, basketId))
  )(state.basket)
  const phoneWithCount = phone => R.assoc('count', phoneCount(phone.id), phone)

  const uniqueIds = R.uniq(state.basket)
  const phones = R.compose(
    R.map(phoneWithCount),
    R.map(id => getPhoneById(state, id))
  )(uniqueIds)

  return phones
}
